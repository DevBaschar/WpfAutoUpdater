name: Build and Release

on:
  push:
    branches:
      - master
  
permissions:
  contents: write

jobs:
  build-zip:
    runs-on: windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore
        run: dotnet restore
      
      - name: Set version from tag
        shell: pwsh
        run: |
            # Get the tag pushed (e.g., v1.2.1)
            $tag = "${{ github.ref_name }}"
            Write-Host "Tag is $tag"

            # Strip 'v' prefix if present
            if ($tag.StartsWith("v")) { $tag = $tag.Substring(1) }
            Write-Host "Version to use: $tag"

            # Convert to 4-part version for AssemblyVersion/FileVersion
            $parts = $tag.Split(".")
            while ($parts.Length -lt 4) { $parts += "0" }
            $asmVersion = ($parts[0..3] -join ".")

            Write-Host "AssemblyVersion: $asmVersion"

            # Update csproj
            (Get-Content WpfAutoUpdater/WpfAutoUpdater.csproj) -replace '<Version>.*</Version>', "<Version>$tag</Version>" `
                -replace '<FileVersion>.*</FileVersion>', "<FileVersion>$asmVersion</FileVersion>" `
                -replace '<AssemblyVersion>.*</AssemblyVersion>', "<AssemblyVersion>$asmVersion</AssemblyVersion>" `
                -replace '<InformationalVersion>.*</InformationalVersion>', "<InformationalVersion>$tag</InformationalVersion>" `
                | Set-Content WpfAutoUpdater/WpfAutoUpdater.csproj

      - name: Publish (win-x64, framework-dependent)
        shell: pwsh
        run: |
          dotnet publish WpfAutoUpdater/WpfAutoUpdater.csproj `
            -c Release -r win-x64 --self-contained false `
            -p:PublishSingleFile=true -o out/win-x64

      - name: Zip published app
        shell: pwsh
        run: |
          New-Item -ItemType Directory -Force -Path artifacts | Out-Null
          Compress-Archive -Path 'out/win-x64/*' -DestinationPath 'artifacts/WpfAutoUpdater-win-x64.zip'

      - name: Extract Version
        id: extractVersion
        shell: pwsh
        run: |
            $xml = [xml](Get-Content ./WpfAutoUpdater/WpfAutoUpdater.csproj)
            [string] $version = [Version] $xml.Project.PropertyGroup.ApplicationDisplayVersion
            echo "version=$($version)" >> $env:GITHUB_OUTPUT

      - name: Create Tag
        uses: actions/github-script@v5
        with:
            github-token: ${{ secrets.GITHUB_TOKEN }}
            script: |
                github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                sha: context.sha,
                ref: 'refs/tags/v${{  steps.extractVersion.outputs.version }}'
                })

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
            tag_name: v${{ steps.extractVersion.outputs.version }}
            name: Release ${{ github.ref_name }}
            files: artifacts/WpfAutoUpdater-win-x64.zip
            generate_release_notes: true
        env:
            GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}


  msix:
    runs-on: windows-latest
    needs: build-zip

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v2

      - name: Build MSIX if packaging project exists
        id: build_msix
        shell: pwsh
        run: |
          $wapproj = Get-ChildItem -Recurse -Filter *.wapproj | Select-Object -First 1
          if (-not $wapproj) {
            Write-Host "No packaging project (.wapproj) found. Skipping MSIX."
            echo "found=false" >> $env:GITHUB_OUTPUT
            exit 0
          }

          Write-Host "Found packaging project: $($wapproj.FullName)"
          msbuild "$($wapproj.FullName)" /p:Configuration=Release /p:Platform=x64 /p:AppxBundle=Always /p:UapAppxPackageBuildMode=SideloadOnly
          echo "found=true" >> $env:GITHUB_OUTPUT

      - name: Locate MSIX artifacts
        id: find_msix
        if: steps.build_msix.outputs.found == 'true'
        shell: pwsh
        run: |
          $bundles = Get-ChildItem -Recurse -Filter *.msixbundle | ForEach-Object { $_.FullName }
          $appinst = Get-ChildItem -Recurse -Filter *.appinstaller | ForEach-Object { $_.FullName }

          if (($bundles.Count + $appinst.Count) -eq 0) {
            Write-Warning "No MSIX artifacts found. Looked for *.msixbundle and *.appinstaller"
            echo "found=false" >> $env:GITHUB_OUTPUT
            exit 0
          }

          # Write newline-delimited lists as outputs
          "bundles<<EOF" >> $env:GITHUB_OUTPUT
          $bundles | ForEach-Object { $_ } >> $env:GITHUB_OUTPUT
          "EOF" >> $env:GITHUB_OUTPUT

          "appinstaller<<EOF" >> $env:GITHUB_OUTPUT
          $appinst | ForEach-Object { $_ } >> $env:GITHUB_OUTPUT
          "EOF" >> $env:GITHUB_OUTPUT

          echo "found=true" >> $env:GITHUB_OUTPUT

      - name: Upload MSIX artifacts
        if: steps.find_msix.outputs.found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: msix
          path: |
            ${{ steps.find_msix.outputs.bundles }}
            ${{ steps.find_msix.outputs.appinstaller }}
